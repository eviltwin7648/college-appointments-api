// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())

  availabilities          Availability[]
  appointmentsAsStudent   Appointment[]  @relation("StudentAppointments")
  appointmentsAsProfessor Appointment[]  @relation("ProfessorAppointments")
}

model Availability {
  id          String   @id @default(uuid())
  professor   User     @relation(fields: [professorId], references: [id])
  professorId String
  date        String
  time        String
  isBooked    Boolean  @default(false)
  createdAt   DateTime @default(now())

  appointment Appointment?

  @@unique([professorId, date, time])
}

model Appointment {
  id        String @id @default(uuid())
  student   User   @relation("StudentAppointments", fields: [studentId], references: [id])
  studentId String

  professor   User   @relation("ProfessorAppointments", fields: [professorId], references: [id])
  professorId String

  availability   Availability @relation(fields: [availabilityId], references: [id])
  availabilityId String       @unique

  status    AppointmentStatus @default(CONFIRMED)
  createdAt DateTime          @default(now())

  @@unique([professorId,studentId,availabilityId])
}

enum Role {
  STUDENT
  PROFESSOR
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
}
